@page "/projects"

@using Portfolio.Blazor.CodeBase
@using Portfolio.Blazor.DataProvider
@using Portfolio.Shared

@inject APIService service
@inject HttpClient client
@inject NavigationManager NavManager
@*@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper*@

<h3>@PageTitle</h3>
<br />

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Requirement</th>
            <th>Option</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var project in ProjectList ?? new Project[] { })
        {
            <tr>
                <td>@project.Title</td>
                <td>@project.Requirement</td>
                <td>
                    <button @onclick="() => EditProject(project.id)">Edit</button>
                    <button @onclick="() => DeleteProject(project.id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button @onclick="ShowAddComponent">Add New Project</button>
<br />

@if (isAddComponentDisplayed is true)
{
    <AddProject GreatestId="@GreatestId" />
}


@code{
    public bool isAddComponentDisplayed = false;
    public string PageTitle { get; set; }
    public IEnumerable<Project> ProjectList { get; set; }
    public int GreatestId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //return base.OnInitializedAsync();
        await GetAllProjectsFromDB();
    }


    public void EditProject(int id)
    {
        NavManager.NavigateTo($"/projects/" + id);
    }

    public async Task DeleteProject(int id)
    {
        await service.DeleteProjectAsync(id);
        StateHasChanged();
        await GetAllProjectsFromDB();
    }

    public void ShowAddComponent()
    {
        if (isAddComponentDisplayed is false)
        {
            isAddComponentDisplayed = true;
        }
        else
        {
            isAddComponentDisplayed = false;
        }

        this.StateHasChanged();
    }

    private async Task GetAllProjectsFromDB()
    {
        ProjectList = await service.GetProjectsAsync();
        GreatestId = ProjectList.Max(p => p.id);
    }
}
