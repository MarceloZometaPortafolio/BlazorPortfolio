@page "/projects"
@*@attribute [Authorize]*@

@using Portfolio.Blazor.DataProvider
@using Portfolio.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using Portfolio.Blazor.Pages.Projects
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject APIService service
@inject NavigationManager NavManager
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IAccessTokenProvider TokenProvider

@*@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper*@

<h3>Projects</h3>
<br />

<AuthorizeView Roles="admin">
    <Authorized>
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Completion Date:</th>
                    <th>Option</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var project in ProjectList)
                {
                    <tr>
                        <td><a class="text-primary" @onclick="() => NavigateToDetailsPage(project.Slug)">@project.Title</a></td>
                        <td>@project.CompletionDate</td>
                        <td>
                            <button @onclick="() => EditProject(project.Slug)" class="my-button">Edit</button>
                            <button @onclick="() => DeleteProject(project.id)" class="my-button">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button @onclick="ShowAddComponent" class="my-button">Add New Project</button>
        <br />

        @if (isAddComponentDisplayed is true)
        {
            <AddProject GreatestId="@GreatestId" ProjectAdded="ProjectAdded" />
        }
    </Authorized>
    <NotAuthorized>
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Completion Date:</th>
                    <th>Option</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var project in ProjectList)
                {
                    <tr>
                        <td><a class="text-primary" @onclick="() => NavigateToDetailsPage(project.Slug)">@project.Title</a></td>
                        <td>@project.CompletionDate</td>
                        <td>                            
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button @onclick="ShowAddComponent" class="my-button">Add New Project</button>
        <br />
    </NotAuthorized>
</AuthorizeView>

@code{
    public bool isAddComponentDisplayed = false;
    public string PageTitle { get; set; }
    public IList<Project> ProjectList = new List<Project>();
    public int GreatestId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAllProjectsFromDB();
    }


    public void EditProject(string slug)
    {
        NavManager.NavigateTo($"projects/edit/" + slug);
    }

    public async Task DeleteProject(int id)
    {
        await service.DeleteProjectAsync(id);
        StateHasChanged();
        await GetAllProjectsFromDB();
    }

    public void ShowAddComponent()
    {
        if (isAddComponentDisplayed is false)
        {
            isAddComponentDisplayed = true;
        }
        else
        {
            isAddComponentDisplayed = false;
        }

        this.StateHasChanged();
    }

    private async Task GetAllProjectsFromDB()
    {
        ProjectList = (await service.GetProjectsAsync()).ToList();
        GreatestId = ProjectList.Max(p => p.id);
    }

    public void NavigateToDetailsPage(string slug)
    {
        NavManager.NavigateTo("projects/" + slug);
    }

    private async Task ProjectAdded(Project project)
    {
        await GetAllProjectsFromDB();
    }
}
