@page "/python-restaurant"
<h3>Python project: Restaurant</h3>
<br />

    Representation of a restaurant using Python, Classes and Test Driven Development(TDD). If you wish to see the complete code go to <a href="https://github.com/MarceloZometaPortafolio/PythonRestaurant">this link</a>

<br />
<br />

<h5>Challenge:</h5>
<br />

    In a nutshell, this challenge is about representing a restaurant system using Python

<br />
<br />

<h5>Implementation:</h5>
<br />

    To solve this challenge, I used Test Driven Development. However, since this was my firt time using Py.test I ran into a problem where this library would not
recognize the tests  I had made. After some research, I found out that you need to follow these steps:

<ol>
    <li>
        After installng Py.test, make sure you create a separate folder for the tests
    </li>
    <li>
        On both the test directory and the modules directory, create a file named "__init__.py". You do not need to write anything on it.
    </li>
    <li>
        When creating a class, filename, or function name make you sure to have every name with the prefix "test_"
    </li>
</ol>
<br />

<img src="images/restaurant/tree.jpg" alt="Directory tree of the projgect" style="margin:2em; justify-self:center" />
<br />

After managing to get tests working, I focused on following a Test Driven Development approach. With it, I managed to have a working restaurant where the user
can order food, food is dispensed, and the administrator can add recipes to the menu. Here is an example of tests and their implementation:

Tests:
<br />

<img src="images/restaurant/test.jpg" alt="Example of tests" style="margin:2em; justify-self:center" />
<br />

Implementation:

<br />

<img src="images/restaurant/implementation.jpg" alt="Implementation of code" style="margin:2em; justify-self:center" />
<br />

<h5>Review:</h5>
<br />
    This restaurant was a great oportunity to practice my Python skills and recall how object oriented programming works in this language. It was also a great
chance for learning Py.test and how useful it can be. This project is far from completed, but its current state is a viable MVP.
<br />
