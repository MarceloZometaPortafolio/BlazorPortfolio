@page "/data-input"
<h3>Scaffolding on Entity Framework</h3>
<br />

The Entity Framework is a set of technologies in ADO.NET that support the development 
of data-oriented software applications. It allows architects and developers to model 
entities, relationships, and logic of the business problems they 
are solving, and it allows them to work with the data engines used to store and retrieve
 the data. More information at
<a href="https://www.datanamic.com/dezign/erdiagramtool.html#:~:text=An%20Entity%20Relationship%20Diagram%20(ERD,have%20an%20Entity%20Relationship%20Diagram.">this site</a>

<br />
All the code here portrayed can be found at 
<a href="https://github.com/MarceloZometaPortafolio/SipItApp">this repository</a>
<br />
<h5>Importance:</h5>
<br />

Entity Framework is a great tool for working with databases on the Dotnet Framework. While 
C# on its own offers a way to connect and talk to a database, doing so opens the chance for 
data corruption for you would publish the connection credentials to every app published. 
In addition, if a user has insert and update permissions for their entry on their app, they 
can easily access other entries too. Using Entity Framework helps us avoid that. 
<br />
<br />

<h5>Design:</h5>
<br />

To work with a database on Dotnet, there are mainly 2 paths:

<ol>
    <li>
        To start from scratch. You personally type each model, controller and APIs. 
        After that, you have to add migrations to the database and update the database manually
        This is fenomenal for new empty databases. It helps you adapt the database based on how you
        are planning to use it.
    </li>

    <li>
        To scaffold the models and dbcontext from an existing database. This is great when you
        have an existing and already populated database for it saves a lot of time. 
    </li>
</ol>

In either case, you still have to manually connect to the database. In this case, since I have
 plenty of experience with the first option, I decided to proceed with the Scaffolding.   

<br />
<br />

<h5>Implementation:</h5>
<br />

Entity Framework makes it really simple for us to scaffold from an existing database. All we have to
do is to download a special Nuget package called "Microsoft.EntityFramework.Tools" which is 
going to allow us to access specialized Entity Framework tools on the console. Make sure
to install this package to the specific project that is going to talk to the database. In
my case, this meant installing it in the API project.

Now that is done, you have to run the following command in the console. Again, make sure 
to be in the proper directory.  
<br />

<img src="images/scaffold/scaffold.jpg" alt="Docker command to scaffold models and dbcontext from PostgreSQL database" style="margin:2em; justify-self:center" />
<br />

From the code above, the text inside the quotation marks is the credentials for the database. 
To connect to a PostgreSQL database you need to specify the host, the port, which database, 
a username and the password. 

Next, the "Npgsql.EntityFrameworkCore.PostgreSQL" specifies the database engine to use. This
is specific to the engine. And finally, the -o Models specifies the output folder where all
the models and controllers will be created. 

Once this process is finished, you can proceed to edit the controller to implement all the
functionality you desire. In my case, I decided to have just options for getting information.
This API will not let the client add, update or remove from the database menu items. 
<br />

<img src="images/scaffold/controller.jpg" alt="Controller example" style="margin:2em; justify-self:center" />
<br />

Finally, to connect your application to the database, you need to specify a dbcontext, a 
service to connect to the dbcontext. The dbConnection is a user secret with the database
credentials.

<br />

<img src="images/scaffold/connection.jpg" alt="Connecting to the database" style="margin:2em; justify-self:center" />

@code {

}
